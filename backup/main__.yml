on: [push]
name: PythonAppAzureDeployment
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repo
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      # Step 2: Login to Azure CLI
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 3: Build and push FastAPI image to Azure Container Registry (ACR)
      - name: 'Build and push FastAPI image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - run: |
          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:${{ github.sha }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:${{ github.sha }}

      # Step 4: Check if PostgreSQL instance already exists (skip if yes)
      - name: 'Check for PostgreSQL Instance'
        id: check_postgres
        run: |
          az container show --name postgres-instance --resource-group ${{ secrets.RESOURCE_GROUP }} --output json || echo "NotFound"

      # Step 5: Deploy PostgreSQL to Azure Container Instances only if not already running
      - name: 'Deploy PostgreSQL to Azure Container Instances'
        if: steps.check_postgres.outputs.result == 'NotFound'
        uses: 'azure/aci-deploy@v1'
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: postgres-instance
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/postgres:13  # Using image from ACR
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: postgres-instance
          location: 'west europe'
          environment-variables: |
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          ports: '5432'
          volumes: |
            volume-name=postgres-data
            mount-path=/var/lib/postgresql/data
            share-name=postgresdata
            storage-account-name=${{ secrets.STORAGE_ACCOUNT }}
            storage-account-key=${{ secrets.STORAGE_ACCOUNT_KEY }}

      # Step 6: Deploy FastAPI App to Azure Container Instances
      - name: 'Deploy FastAPI App to Azure Container Instances'
        uses: 'azure/aci-deploy@v1'
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:${{ github.sha }}
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: fastapi-sampleapp
          location: 'west europe'
          environment-variables: |
            DB_HOST=postgres-instance
            DB_USER=${{ secrets.POSTGRES_USER }}
            DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DB_NAME=${{ secrets.POSTGRES_DB }}
